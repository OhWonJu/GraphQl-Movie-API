디렉토리 내 yarn init
디스크립션 입력
리포지토리 url입력
제작자 입력
..
git이랑 연결.
git init .
git remote add origin URL~
git pull origin master.

yarn add grapql-yoga  <- 그래프큐엘 서버 인스톨

-----------------------------------------------------
GraphQl이 해결할 수 있는 두가지 문제점
1. over-fetching
 GET 방식에서 일어날 수 있는것.  사용자가 요청한 영역의 정보보다 더 많은 정보를 서버에서 받는 경우
 이를 해결 할 수 있음 -> 개발자가 '어떤 정보를 원하는 가'에 대한 통제를 할 수 있음.
2. under-fetching
 특정한 요청을 완료하기 위해 다른 요청을 할 때 발생하는 문제.
 즉 REST에서 하나의 요청을 완성하기 위해 많은 소스를 요청하는 경우임. ex 앱을 시작하기 위해 3개의 정보를 받아와야한다. 등
== 이러한 문제들은 GraphQL을 통해 해결 가능. 한 query만으로도 원하는 정보를 정확하게 받아 올 수 있음.   
     -> GraphQl은 URL체제가 아니기 때문.

Query는 
/feed/notic/user/....와 같은 url이 아닌

query {
 feed {
   }
  ...
} 와 같이 객체와 비슷한 모양을 DB에 요청하고 DB는 이에 맞는 객체를 전송하는 개념.

GraphQl -> query(그래프큐엘 언어) -> DB 
                          JS 형식            <-


요점 : 원하는 정보만을 받을 수 있고
	원하는데로 조정 가능하다는 것. (API를 이용한다던지 해서!)

------------------------------------------------------
yarn global add nodemon <- 글로벌로 설치한적 없다면.
nodemon은 파일을 수정할 때마다 자동으로 서버를 reset해줌

package.json에 "scripts" {
		"start" : "nodemon"
	         } 을 추가하면 nodemon이 index.js파일을 주시하게 됨


https://github.com/prisma/graphql-yoga  <- graphQl DOC

-----------------------------------------------------
서버 설치. 
1. Quickstart  -> const graphqlYoga = require("graphql-yoga"); 구버전이래

구버전이 싫다면.. yarn add babel-node --dev or
yarn global add babel-cli or
yarn global add babel-cli -ignore-engines 

여튼 이렇게 하고 
"start"에 --exec babel-node 추가.
index.js 추가.

------------------------------------------------------
.babelrc 파일을 통해 babel 환경 설정
{
  "presets": ["env", "stage-3"]
} 은 국룰이라네

yarn add babel-cli babel-preset-env babel-preset-stage-3 --dev

------------------------------------------------------

import { GraphQLServer } from "graphql-yoga";

// 서버 생성
const server = new GraphQLServer({
  // 환경 설정
});

server.start(() => console.log("GraphQl Server Running"));

약간의 설정과 grapql로 서버를 생성한거임.


-----------------------------------------------------
Schema !